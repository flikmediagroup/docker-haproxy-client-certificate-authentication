# This configuration is a simplified example of how to use ssl on front
# and backends with additional certificates loaded from a directory for SNI
# capable clients.

global
  pidfile                 /var/run/haproxy.pid
  user                    nobody
  group                   nobody
	maxconn 10000
  log                     127.0.0.1 local0 debug
  tune.ssl.default-dh-param 2048

defaults
	log                     global
	mode http
	option                  splice-auto
	option                  http-keep-alive
	option                  httplog
	option                  redispatch
	option 									forwardfor except 127.0.0.1
	option									log-health-checks
	retries                 15
	timeout http-request    5s
	timeout queue           1m
	timeout connect         5s
	timeout client          1m
	timeout server          1m
	timeout http-keep-alive 10s
	timeout check           10s
	maxconn 10000

frontend myfrontend
	bind 0.0.0.0:80
  # bind 0.0.0.0:443 transparent ssl crt /etc/haproxy/cert/localhost.crt ca-file /etc/haproxy/cert/ca.crt verify required crl-file /etc/haproxy/cert/root_crl.pem
  bind *:443 transparent ssl crt /usr/local/etc/haproxy/certs/server.pem ca-file /usr/local/etc/haproxy/certs/ca.pem verify %VERIFY_REQUIRED%
	%VPATH_ACL%

  %SSL_VERIFY%
	http-request set-header X-SSL                       %[ssl_fc]
	http-request set-header X-SSL-Client-Verify         %[ssl_c_verify]
	http-request set-header X-SSL-Client-SHA1           %{+Q}[ssl_c_sha1,hex]
	http-request set-header X-SSL-Client-DN             %{+Q}[ssl_c_s_dn]
	http-request set-header X-SSL-Client-CN             %{+Q}[ssl_c_s_dn(cn)]
	http-request set-header X-SSL-Issuer                %{+Q}[ssl_c_i_dn]
	http-request set-header X-SSL-Client-Not-Before     %{+Q}[ssl_c_notbefore]
	http-request set-header X-SSL-Client-Serial         %{+Q}[ssl_c_serial,hex]
	http-request set-header X-SSL-Client-Version        %{+Q}[ssl_c_version]

	%VPATH_USE_BACKEND%

backend mybackend
  mode http
	option forwardfor
  option http-server-close
	%VPATH_REQREP%
	# a http backend
	server s3 %APP_HOST%:8080 check
	# a https backend
	# server s4 %APP_HOST%:443 ssl verify none

